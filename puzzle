'''
Johns Hopkins University
Department of Chemical and Biomolecular Engineering
Software Carpentry Project
Final Project Fall 2021
Authors: Dake Guo, Yu Xu

Welcome to our final project!
The goal of this project is to write a python code in order to generate a playable puzzle game
The puzzle game is set to three levels, 3*3, 4*4, 5*5, press l/m/h to enter either mode
you can you mouse or WASD to complete the puzzle.

In order to play the puzzle game, you will need this python file and .TTF file and images can be found in our repository. 
You can change any pictures you want to enjoy the game time.
You can also change the difficulty of the game any time you want.

The main idea of this file is to generate blocks that compose puzzle block, break the picture into fragements and reshuffle it.
Thus far you can change the difficuly of the game anytime you want.

Hope you enjoy the game!
'''

import os
import sys
import random
import pygame

'''blank block move left'''
def Right(screen, void, col):
    if void % col == 0:
        return void
    screen[void-1], screen[void] = screen[void], screen[void-1]
    return void - 1
    
'''blank block move right'''
def Left(screen, void, col):
    if (void+1) % col == 0:
        return void
    screen[void+1], screen[void] = screen[void], screen[void+1]
    return void + 1

'''blank block move up'''
def Down(screen, void, col):
        if void < col:
            return void
        screen[void-1], screen[void] = screen[void], screen[void-col]
        return void - col

'''blank block move down'''
def Up(screen, void, row, col):
        if void >= (row-1) * col:
            return void
        screen[void+col], screen[void] = screen[void], screen[void+col]
        return void + col

def Mix(row, col, grid):
    #Rearrange the blocks
    screen = []
    for i in range(grid):
        screen.append(i)
    # create a void block in the right corner
    void = grid - 1
    screen[void] = -1
    for i in range(10):
        direction = random.randint(0, 3)
        #move to the left
        if direction == 0:
            void = Left(screen, void, col)
        #move to the right
        elif direction == 1:
            void = Right(screen, void, col)
        #move up
        elif direction == 2:
            void = Up(screen, void, row, col)
        #move down
        elif direction == 3:
            void = Down(screen, void, col)
    return screen, void
    
'''choose image randomly'''
def Chosepicture(path):
    picturename = os.listdir(picture_path)
    # verify whether there is a picture
    # the image save path is same as the program path, convenient to get the path
    # then get the image path
    if len(picturename) > 0:
        return os.path.join(picture_path, random.choice(picturename))
    
# interface at the end of the game


# interface at the begining of the game



# main function
def main():
    # initalization
    pygame.init()
    clock = pygame.time.Clock()
    # load image
    picture_path = os.path.join(os.getcwd(), 'resources/pictures')
    picture = pygame.image.load(Chosepicture(picture_path))
    picture = pygame.transform.scale(picture, (600, 600))
    picture_rect = picture.get_rect()
    # setup window
    
        
